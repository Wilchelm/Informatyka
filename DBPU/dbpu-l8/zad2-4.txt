Uniksowe systemy operacyjne (w tym Linux i macOS Apple) zwykle nie blokują automatycznie otwartych plików. Dostępnych jest kilka rodzajów mechanizmów blokowania plików w różnych wersjach Uniksa, a wiele systemów operacyjnych obsługuje więcej niż jeden rodzaj zgodności. Najczęstszym mechanizmem jest fcntl. Dwa inne takie mechanizmy to flock (2) i lockf (3), które mogą być oddzielne lub mogą być zaimplementowane na szczycie fcntl. Chociaż niektóre typy blokad można skonfigurować na mantadory, blokady plików w systemie Unix są domyślnie advisory. Oznacza to, że współpracujące procesy mogą używać blokad do koordynowania dostępu do pliku między sobą, ale procesy niedziałające w ramach współpracy mogą również ignorować blokady i uzyskiwać dostęp do pliku w dowolny wybrany przez siebie sposób. Innymi słowy, blokady plików blokują tylko inne blokady plików, a nie operacje we/wy.

Oferowane są dwa rodzaje zamków: wspólne i ekskluzywne. W przypadku fcntl różne rodzaje blokad można zastosować do różnych sekcji (zakresów bajtów) pliku lub do całego pliku. Blokady współdzielone mogą być utrzymywane przez wiele procesów jednocześnie, ale blokada wyłączna może być utrzymywana tylko przez jeden proces i nie może współistnieć z blokadą współdzieloną. Aby uzyskać blokadę współdzieloną, proces musi poczekać, aż żaden proces nie zablokuje blokady wyłącznej. Aby uzyskać blokadę wyłączną, proces musi poczekać, aż żaden proces nie zablokuje żadnego rodzaju blokady. W przeciwieństwie do blokad tworzonych przez fcntl, te tworzone przez flock są zachowywane na widłach, dzięki czemu są przydatne w rozwidlaniu serwerów. Dlatego możliwe jest, aby więcej niż jeden proces utrzymywał wyłączną blokadę w tym samym pliku, pod warunkiem, że procesy te mają relację synowską, a blokada wyłączna została początkowo utworzona w jednym procesie, zanim została zduplikowana w rozwidleniu.

Blokady współdzielone są czasami nazywane „blokadami odczytu”, a blokady wyłączne są czasami nazywane „blokadami zapisu”. Ponieważ jednak blokady na Uniksie są advisory, nie jest to wymuszane. W ten sposób baza danych może mieć koncepcję „zapisów współdzielonych” vs. „zapisów wyłącznych”; na przykład zmiana pola w miejscu może być dozwolona w ramach współdzielonego dostępu, podczas gdy zbieranie śmieci i przepisywanie bazy danych może wymagać wyłącznego dostępu.

Blokady plików dotyczą rzeczywistego pliku, a nie jego nazwy. Jest to ważne, ponieważ Unix pozwala wielu nazwom odnosić się do tego samego pliku. W połączeniu z blokowaniem innym niż mantadory zapewnia to dużą elastyczność w dostępie do plików z wielu procesów. Z drugiej strony podejście polegające na blokowaniu kooperacyjnym może prowadzić do problemów, gdy proces zapisuje do pliku bez przestrzegania blokad plików ustawionych przez inne procesy.

Z tego powodu niektóre systemy operacyjne typu Unix oferują również ograniczoną obsługę blokowania mantadory. W takich systemach plik, którego bit setgid jest włączony, ale którego bit wykonania grupy jest wyłączony po otwarciu tego pliku, będzie podlegał automatycznemu blokowaniu mantadory, jeśli bazowy system plików go obsługuje. Jednak nielokalne partycje NFS zwykle ignorują ten bit. Jeśli plik podlega blokowaniu mantadory, próby odczytu z regionu zablokowanego wyłączną blokadą lub zapisu w regionie zablokowanym blokadą współdzieloną lub wyłączną będą blokowane do momentu zwolnienia blokady. Ta strategia powstała po raz pierwszy w Systemie V i można ją dziś zobaczyć w systemach operacyjnych Solaris, HP-UX i Linux. Nie jest to jednak część POSIX, a systemy operacyjne pochodzące z części BSD, takie jak FreeBSD, OpenBSD, NetBSD i macOS Apple, nie obsługują go. Linux obsługuje także blokowanie mantadory poprzez specjalny parametr „mount (8) -o mand” do montowania systemu plików, ale jest to rzadko używane.

Niektóre systemy operacyjne uniksopodobne uniemożliwiają próby otwarcia pliku wykonywalnego działającego programu w celu zapisu(Some Unix-like operating systems prevent attempts to open the executable file of a running program for writing); jest to trzecia forma blokowania, niezależna od tych dostarczanych przez fcntl i flock.

Aby zrozumieć, jak to działa, wykonujemy następujący program file_lock.c:

#include <stdio.h>
#include <fcntl.h>

int main(int argc, char **argv) {
  if (argc > 1) {
    int fd = open(argv[1], O_WRONLY);
    if(fd == -1) {
      printf("Unable to open the file\n");
      exit(1);
    }
    static struct flock lock;

    lock.l_type = F_WRLCK;
    lock.l_start = 0;
    lock.l_whence = SEEK_SET;
    lock.l_len = 0;
    lock.l_pid = getpid();

    int ret = fcntl(fd, F_SETLKW, &lock);
    printf("Return value of fcntl:%d\n",ret);
    if(ret==0) {
      while (1) {
        scanf("%c", NULL);
      }
    }
  }
}


Kompilowanie:
gcc -w -o file_lock file_lock.c

Zamontowanie ponownie głównego system plików z opcją „mand”, używając polecenia mount, jak pokazano poniżej. Umożliwi to obowiązkowe blokowanie na poziomie systemu plików.:

sudo mount -oremount,mand /

Tworzymy 2 pliki o nazwach „advisory.txt” i „mandatory.txt” w katalogu, w którym znajduje się plik wykonywalny (file_lock). Włącz Set-Group-ID i wyłącz Bit-Execute-Group dla „mandatory.txt” w następujący sposób:

touch advisory.txt
touch mandatory.txt
chmod g+s,g-x mandatory.txt

1. Testowanie blokady advisory: Uruchom teraz przykładowy program z argumentem „advisory.txt”.

./file_lock advisory.txt

Program będzie czekać na dane wejściowe od użytkownika. Z innego terminala lub konsoli spróbuj wykonać następujące czynności

ls >>advisory.txt

W powyższym przykładzie polecenie ls zapisze dane wyjściowe w pliku advisory.txt. Mimo że otrzymujemy blokadę zapisu, nadal jakiś inny proces (niewspółpracujący) może zapisać do pliku. Jest to nazywane blokowaniem „doradczym”.

2. Testuj blokowanie mantadory: Ponownie uruchom przykładowy program z argumentem „mandatory.txt”.

./file_lock mandatory.txt

Z innego terminala lub konsoli spróbuj wykonać następujące czynności:

ls >>mandatory.txt

W powyższym przykładzie polecenie ls poczeka na usunięcie blokady przed zapisaniem danych wyjściowych w pliku mandatory.txt. Jest to nadal proces niewspółpracujący, ale blokowanie odbywa się za pomocą blokady obowiązkowej.


