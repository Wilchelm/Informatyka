module dec_to_hex (a,b);

input [3:0] a;
output reg [6:0] b;

always
	case (a)
		4'd0 : b = 7'b1000000;
		4'd1 : b = 7'b1111001;
		4'd2 : b = 7'b0100100;
		4'd3 : b = 7'b0110000;
		4'd4 : b = 7'b0011001;
		4'd5 : b = 7'b0010010;
		4'd6 : b = 7'b0000010;
		4'd7 : b = 7'b1111000;
		4'd8 : b = 7'b0000000;
		4'd9 : b = 7'b0010000;
		4'd10 : b = 7'b0111111; // -
		4'd12 : b = 7'b0101111; // r
		4'd13 : b = 7'b0000110; // e
		4'd14 : b = 7'b1110111; // spacja
	endcase

endmodule



module ALU (a,b,op,result,sig,HEX0,HEX1,HEX2,HEX3);

input [4:0]a,b;
input [1:0]op;
output reg [9:0]result;
output reg sig;
reg [3:0] c0, c1, c2, c3;
output[6:0] HEX0,HEX1,HEX2,HEX3;

always @ (*)
	begin
		case (op)
			2'b10 :
				begin
					result = b+a;
					sig = 0;
					c0 = result%10;
					c1 = result%100/10;
					c2 = result%1000/100;
					c3 = result%10000/1000;
				end
			//2'b01 : result = b-a;
			2'b01 :
				if (b>a)
					begin
						result = b-a;
						sig = 0;
						c0 = result%10;
						c1 = result%100/10;
						c2 = result%1000/100;
						c3 = result%10000/1000;
					end
				else
					begin
						result = a-b;
						if (result>15)
							begin
								sig = 1;
								c0 = 4'd12;
								c1 = 4'd12;
								c2 = 4'd13;
								c3 = 4'd14;
							end
						else
							begin
								sig = 1;
								c0 = result%10;
								c1 = result%100/10;
								c2 = result%1000/100;
								c3 = 4'd10;
							end
					end
			2'b11 :
				begin
					result = b*a;
					if (result>900)
						begin
							sig = 0;
							c0 = 4'd12;
							c1 = 4'd12;
							c2 = 4'd13;
							c3 = 4'd14;
						end
					else
						begin
							sig = 0;
							c0 = result%10;
							c1 = result%100/10;
							c2 = result%1000/100;
							c3 = result%10000/1000;
						end
				end
			2'b00 :
				begin
					result = 5'b00000;
					sig = 0;
					c0 = result%10;
					c1 = result%100/10;
					c2 = result%1000/100;
					c3 = result%10000/1000;
				end
		endcase
	end
dec_to_hex (c0,HEX0);
dec_to_hex (c1,HEX1);
dec_to_hex (c2,HEX2);
dec_to_hex (c3,HEX3);

endmodule



module test (KEY, SW, LEDR, LEDG, HEX0,HEX1,HEX2,HEX3);

input[2:0] KEY;
input[9:0] SW;
output[9:0] LEDR;
output[7:0] LEDG;
output[6:0] HEX0,HEX1,HEX2,HEX3;
reg [1:0] operator;

always @ (*)
	case (KEY[2:0])
		3'b110 : operator = 2'b10;
		3'b101 : operator = 2'b01;
		3'b011 : operator = 2'b11;
		default : operator = 2'b00;
	endcase

ALU (SW[4:0], SW[9:5], operator, LEDR[9:0], LEDG[7], HEX0,HEX1,HEX2,HEX3);

endmodule
